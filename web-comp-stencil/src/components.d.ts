/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface LoadingSpinner {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface SideBar {
        "close": () => Promise<void>;
        "open": () => Promise<void>;
        "opened": boolean;
        "title": string;
    }
    interface StockPrice {
        "stockName": string;
    }
    interface StockSearch {
        "stockName": string;
    }
    interface ToolTip {
        "text": string;
    }
}
declare global {
    interface HTMLLoadingSpinnerElement extends Components.LoadingSpinner, HTMLStencilElement {
    }
    var HTMLLoadingSpinnerElement: {
        prototype: HTMLLoadingSpinnerElement;
        new (): HTMLLoadingSpinnerElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLSideBarElement extends Components.SideBar, HTMLStencilElement {
    }
    var HTMLSideBarElement: {
        prototype: HTMLSideBarElement;
        new (): HTMLSideBarElement;
    };
    interface HTMLStockPriceElement extends Components.StockPrice, HTMLStencilElement {
    }
    var HTMLStockPriceElement: {
        prototype: HTMLStockPriceElement;
        new (): HTMLStockPriceElement;
    };
    interface HTMLStockSearchElement extends Components.StockSearch, HTMLStencilElement {
    }
    var HTMLStockSearchElement: {
        prototype: HTMLStockSearchElement;
        new (): HTMLStockSearchElement;
    };
    interface HTMLToolTipElement extends Components.ToolTip, HTMLStencilElement {
    }
    var HTMLToolTipElement: {
        prototype: HTMLToolTipElement;
        new (): HTMLToolTipElement;
    };
    interface HTMLElementTagNameMap {
        "loading-spinner": HTMLLoadingSpinnerElement;
        "my-component": HTMLMyComponentElement;
        "side-bar": HTMLSideBarElement;
        "stock-price": HTMLStockPriceElement;
        "stock-search": HTMLStockSearchElement;
        "tool-tip": HTMLToolTipElement;
    }
}
declare namespace LocalJSX {
    interface LoadingSpinner {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface SideBar {
        "opened"?: boolean;
        "title"?: string;
    }
    interface StockPrice {
        "stockName"?: string;
    }
    interface StockSearch {
        "onStockselect"?: (event: CustomEvent<string>) => void;
        "stockName"?: string;
    }
    interface ToolTip {
        "text"?: string;
    }
    interface IntrinsicElements {
        "loading-spinner": LoadingSpinner;
        "my-component": MyComponent;
        "side-bar": SideBar;
        "stock-price": StockPrice;
        "stock-search": StockSearch;
        "tool-tip": ToolTip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "loading-spinner": LocalJSX.LoadingSpinner & JSXBase.HTMLAttributes<HTMLLoadingSpinnerElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "side-bar": LocalJSX.SideBar & JSXBase.HTMLAttributes<HTMLSideBarElement>;
            "stock-price": LocalJSX.StockPrice & JSXBase.HTMLAttributes<HTMLStockPriceElement>;
            "stock-search": LocalJSX.StockSearch & JSXBase.HTMLAttributes<HTMLStockSearchElement>;
            "tool-tip": LocalJSX.ToolTip & JSXBase.HTMLAttributes<HTMLToolTipElement>;
        }
    }
}
